#--------------------------------Result For Daily Data------------------------------------
Ddata <- read.csv("Daily Data.csv")
D <- Ddata
if(names(D)[length(names(D))]=="X") #Sometimes the names read in contain 'X', we don't want this variable
{
  D <- D[,1:(dim(D)[2]-1)]
}

summary(D)

#Deal with all the 0s in the data
for(j in 8:(dim(D)[2]))
{
  for(i in 2:dim(D)[1])
  {
    if((!is.na(D[i,j]))&&(D[i,j]==0))
      D[i,j] = D[i-1,j]
    else
    {
      if(is.na(D[i,j]))
        D[i,j] = D[i-1,j]
    }
  }
}
DLR <- NA
DLR <- D
#到这里我们可以保证每一个数据都是我们到对应日期的当晚可以得到的
#计算logreturn 
for(j in 3:dim(D)[2])
{
  for(i in 2:dim(D)[1])
  {
    DLR[i,j] <- log(D[i,j]/D[i-1,j])  #DLR[i,j] stores the return result from i-1 to i, because we only know this value when time has come to i. So it's reasonable. Because we use i-1's x trying to predict i's y. 
  }
}
DLR <- DLR[2:(dim(DLR)[1]),]

FactorResultDaily(DLR$RMBperAUD,DLR$IO) #Posi, Sig

FactorResultWeekly(DLR$ElectricityDailyCoalUse.S5116614.,DLR$JM)

#建立moving average的序列，加入原始数据中
MovingDLR <- DLR
step <- 20
MovingDLR <- MovingDLR[(step):dim(DLR)[1],]
for(j in 8:28)
{
  MovingDLR[,j] <- rollEWMA(DLR[,j],step)
}

FactorResultDaily(MovingDLR$ElectricityDailyCoalUse.S5116614.,MovingDLR$JM) #Negi, Not so Sig

#Generate a Benchmark for our strategy
#这个跑过一次就行了，再跑很慢
x <- MovingDLR$USDperAUD
y <- MovingDLR$IO
temp <- cbind(x,y)
temp <- as.data.frame(temp[complete.cases(temp),])
returnlist <- matrix(nrow = 100000,ncol = (dim(temp)[1]-1))
for(path in 1:100000)
{
  for(i in 1:(dim(temp)[1]-1))
  {
    if(rnorm(1)>0)
    {
      returnlist[path,i] <- temp$y[i+1]
    }
    else
      returnlist[path,i] <- -temp$y[i+1]
  }
}
quantile(((apply(exp(returnlist),1,prod))-1),c(0.9,0.95,0.99))
rm(returnlist) #this variable is too big
#      Min.    1st Qu.     Median       Mean    3rd Qu.       Max. 
#  -0.368800 -0.094780   -0.005814    0.007094 0.092020    0.661100 
#higher than this random trading benchmark means that our simple strategy is working
#90%       95%       99% 
#0.2404901 0.3173291 0.4757228
#annulaized 

#Use rolling regression method to test our strategy, if we use constant and correlation, the result is that we have are always short position.
FactorResultDNew <- function(x,y,holding = 1,outputdetail = 0,tradingcost = 0,rolling = 125)
{
  #在这里我们只做lag1阶的回归，不再做别的回归了，我们假设一阶滞后的效果是最明显的
  returnlist <- vector()
  ynas <- sum(as.numeric(is.na(y)))
  ytl <- length(y)
  ya <- y[!is.na(y)]
  yal <- length(ya)
  totalregression <- yal - rolling
  tresultvec <- vector()
  consvec <- vector()
  corsvec <- vector()
  positiondirection <- vector()
  for(i in 2:totalregression)
  {
      #lag 1
    ytemp <- ya[i:(rolling-1+i)] #it's always true that ya[i:(rolling-1+i)] == y[(ynas+i):(ynas-1+i+rolling)]
    xtemp <- x[(ynas-1+i):(ynas-1+i+rolling-1)]
    if(is.na(xtemp[1]))
      xtemp[1] <- xtemp[2]
    #这里容易出错，记得check
    t <- summary(lm(ytemp~xtemp))$coefficient[2,3]
    con <- summary(lm(ytemp~xtemp))$coefficient[1,1]
    cor <- summary(lm(ytemp~xtemp))$coefficient[2,1]
    tresultvec[i] <- t
    consvec[i] <- con
    corsvec[i] <- cor
    flag <- sign(t)
    if(holding==1)
    {
      #注意我们这里要用于test的x和y都是rolling regression没用到的下两个数据
      xfortest <- x[(ynas-1+i+rolling-1)+1]
      yfortest <- ya[(rolling-1+i)+1]
      if((con + cor*xfortest)>0)
      {
        returnlist[i] <- yfortest
        positiondirection[i] <- 1
      }
      else
      {
        returnlist[i] <- -yfortest
        positiondirection[i] <- -1
      }
      
    }
    else #Holding Period is not 1 day, not done yet
    {
    }
  }
  returntotal <- prod(exp(returnlist[!is.na(returnlist)])-tradingcost)-1
  returnl <- list()
  returnl[[1]] <- returntotal #return total return
  returnl[[2]] <- returnlist[!is.na(returnlist)] #return daily return
  returnl[[3]] <- flag #return 1 or -1
  returnl[[4]] <- as.vector(table(positiondirection)) #Return long or short of our position
  returnl[[5]] <- tresultvec #return t values
  returnl[[6]] <- consvec #return constant values
  returnl[[7]] <- corsvec #return correlations
  if(outputdetail==1)
    return(returnl)
  else
    return(returntotal) 
}

#Use rolling regression method to test our strategy, if we use constant and correlation, the result is that we have are always short position. Because previously it was always sgort position, so we use only sign here.
FactorResultDNewOnlySign <- function(x,y,holding = 1,outputdetail = 0,tradingcost = 0,rolling = 125)
{
  #在这里我们只做lag1阶的回归，不再做别的回归了
  returnlist <- vector()
  ynas <- sum(as.numeric(is.na(y)))
  ytl <- length(y)
  ya <- y[!is.na(y)]
  yal <- length(ya)
  totalregression <- yal - rolling
  tresultvec <- vector()
  consvec <- vector()
  corsvec <- vector()
  positiondirection <- vector()
  for(i in 1:totalregression)
  {
    ytemp <- ya[i:(rolling-1+i)]
    xtemp <- x[(ynas-1+i):(ynas-1+i+rolling-1)]
    if(is.na(xtemp[1]))
      xtemp[1] <- xtemp[2]
    #这里容易出错，记得check
    t <- summary(lm(ytemp~xtemp))$coefficient[2,3]
    con <- summary(lm(ytemp~xtemp))$coefficient[1,1]
    cor <- summary(lm(ytemp~xtemp))$coefficient[2,1]
    tresultvec[i] <- t
    consvec[i] <- con
    corsvec[i] <- cor
    flag <- sign(t)
    if(holding==1)
    {
      #注意我们这里要用于test的x和y都是rolling regression没用到的下两个数据
      xfortest <- x[(ynas-1+i+rolling-1)+1]
      yfortest <- ya[(rolling-1+i)+1]
      if(flag==1)
      {    
        if((xfortest)>0)
        {
          returnlist[i] <- yfortest
          positiondirection[i] <- 1
        }
        if((xfortest)<0)
        {
          returnlist[i] <- -yfortest
          positiondirection[i] <- -1}
      }
      if(flag==-1)
      {    
        if((xfortest)>0)
        {
          returnlist[i] <- -yfortest
          positiondirection[i] <- -1
        }
        if((xfortest)<0)
        {
          returnlist[i] <- yfortest
          positiondirection[i] <- 1}
      }
    }
    if(holding!=1) #Holding Period is not 1 day, not done yet, not seems to be a useful part
    {
      date <- MovingDLR$Ndate
      temp <- as.data.frame(cbind(date,x,y))
      temp <- as.data.frame(temp[complete.cases(temp),])
      returnlist <- vector()
      htemp <- temp[seq(1,dim(temp)[1],holding),]
      for(i in 1:dim(htemp)[1])
      {
        if(flag==1)
        {
          for(i in 1:(dim(htemp)[1]-1))
          {
            if((htemp$x[i]*cor+cons)>0)
            {
              returnlist[i] <- htemp$y[i+1]
            }
            else
              returnlist[i] <- -htemp$y[i+1]
          }
        }
        if(flag==-1)
        {
          for(i in 1:(dim(htemp)[1]-1))
          {
            if((htemp$x[i]*cor+cons)>0)
            {
              returnlist[i] <- -htemp$y[i+1]
            }
            else
              returnlist[i] <- htemp$y[i+1]
          }
        }
      }
      returntotal <- (prod(exp(returnlist)))^(1/((htemp$date[length(htemp$date)]-htemp$date[1])/250))-1
      returnl <- list()
      returnl[[1]] <- returntotal
      returnl[[2]] <- returnlist
      if(outputdetail==1)
        return(returnl)
      else
        return(returntotal)    
    }
  }
  returntotal <- prod(exp(returnlist)-tradingcost)-1 #similiar as the previous one
  returnl <- list()
  returnl[[1]] <- returntotal
  returnl[[2]] <- returnlist
  returnl[[3]] <- flag
  returnl[[4]] <- as.vector(table(positiondirection))
  returnl[[5]] <- tresultvec
  returnl[[6]] <- consvec
  returnl[[7]] <- corsvec
  if(outputdetail==1)
    return(returnl)
  if(outputdetail!=1)
    return(returntotal) 
}

#看一下daily的data表现到底怎么样，从t值的角度
for(i in 8:27)
{
  t <- FactorResultDaily(MovingDLR[,i],MovingDLR$IO,1)
  print(c(names(MovingDLR)[i],sign(t[2,2]),SimpleStrategy(MovingDLR[,i],MovingDLR$IO,sign(t[2,2]))))
}


#试一下如果用lag一天的自己的价格指数来做交易的话怎么样，作为benchmark
SimpleStrategy(MovingDLR$IO,MovingDLR$IO,1,1)

#上面是用rolling regression的，下面是用确定的符号的，所以有点不一样
#test time series correlation
acf(MovingDLR$IO[!is.na(MovingDLR$IO)])
acf(DLR$IO[!is.na(DLR$IO)])
pacf(MovingDLR$IO[!is.na(MovingDLR$IO)])
testresultIO <- vector()
#test this simple strategy
for(i in (sum(as.numeric(is.na(DLR$IO)))+2):dim(DLR)[1])
{
  if(DLR$IO[i-1]>0)
    testresultIO[i-sum(as.numeric(is.na(DLR$IO)))] <- DLR$IO[i]
  else
    testresultIO[i-sum(as.numeric(is.na(DLR$IO)))] <- -DLR$IO[i]
}
testresultIO <- testresultIO[!is.na(testresultIO)]
prod((exp(testresultIO)-0.0001))-1

name <- names(MovingDLR)
IOreturns <- data.frame(30,5)
for(i in 8:26)
{
  temp <- FactorResultDNew(MovingDLR[,i],MovingDLR$IO,1,1)
  IOreturns[i-7,2] <- temp[[1]]
  IOreturns[i-7,3] <- mean(as.numeric(temp[[2]]>0))
  IOreturns[i-7,1] <- name[i]
  IOreturns[i-7,4] <- temp[[3]]
  IOreturns[i-7,5] <- sharp(temp[[2]][!is.na(temp[[2]])]) #calculate sharp ratio here
  print(temp[[4]])
}

#IO simple strategy
IODSimple <- data.frame((dim(MovingDLR)[2]),4)
for(i in 8:27)
{
  t <- FactorResultDaily(MovingDLR[,i],MovingDLR$IO,1)
  re <- SimpleStrategy(MovingDLR[,i],MovingDLR$IO,sign(t[2]))
  IODSimple[i-7,2] <- re[1]
  IODSimple[i-7,3] <- re[2]
  IODSimple[i-7,1] <- names(MovingDLR)[i]
  IODSimple[i-7,4] <- t[2]
  IOreturns[i-7,5] <- sharp(temp[[2]][!is.na(temp[[2]])]) #calculate sharp ratio here,在后面的function那改一下
  print(c(re[3],re[4]))
}

#Use self indicator
t <- FactorResultDaily(MovingDLR$IO,MovingDLR$IO,1)
SimpleStrategy(MovingDLR$IO,MovingDLR$IO,sign(t[2]))

#Use self indicator
t <- FactorResultDaily(MovingDLR$RB,MovingDLR$RB,1)
SimpleStrategy(MovingDLR$RB,MovingDLR$RB,sign(t[2]))

#Use self indicator
t <- FactorResultDaily(MovingDLR$HC,MovingDLR$HC,1)
SimpleStrategy(MovingDLR$HC,MovingDLR$HC,sign(t[2]))

#Use self indicator
t <- FactorResultDaily(MovingDLR$J,MovingDLR$J,1)
SimpleStrategy(MovingDLR$J,MovingDLR$J,sign(t[2]))

#Use self indicator
t <- FactorResultDaily(MovingDLR$JM,MovingDLR$JM,1)
SimpleStrategy(MovingDLR$JM,MovingDLR$JM,sign(t[2]))

#这里是在看只用beta效果如何,rolling = 125 seems to be good


#Try a longer holding period lets say 5 days
# IOreturns5 <- data.frame(30,3)
# for(i in 8:26)
# {
#   if(i==21000) #Not going to happen
#   {temp <- cbind(MovingDLR[,i],MovingDLR$IO)
#   temp <- as.data.frame(temp[complete.cases(temp),])
#   temp <- temp[!is.infinite(temp$V1),]
#   temp1 <- FactorResultD(temp$V1,temp$V2,1,1)
#   IOreturns[i-4,2] <- temp1[[1]]
#   IOreturns[i-4,3] <- mean(as.numeric(temp1[[2]]>0))
#   IOreturns[i-4,1] <- name[i]}
#   else
#   {
#     temp <- FactorResultD(MovingDLR[,i],MovingDLR$IO,5,1)
#     IOreturns5[i-7,2] <- temp[[1]]
#     IOreturns5[i-7,3] <- mean(as.numeric(temp[[2]]>0))
#     IOreturns5[i-7,1] <- name[i]
#   }
# }

#Generate a benchmark for always long and always short

for(i in 3:7)  #Also Annulaized
{
  print(c(names(MovingDLR)[i],prod(exp(MovingDLR[!is.na(MovingDLR[,i]),i]))^(250/length(MovingDLR[!is.na(MovingDLR[,i]),i]))-1,prod(exp(-MovingDLR[!is.na(MovingDLR[,i]),i]))^(250/length(MovingDLR[!is.na(MovingDLR[,i]),i]))-1))
}

for(i in 3:7)
{
  plot(D[!is.na(D[,i]),i],type = 'l')
}

RBreturns <- data.frame(30,4)
for(i in 8:26)
{
  temp <- FactorResultDNewOnlySign(MovingDLR[,i],MovingDLR$RB,1,1)
  RBreturns[i-7,2] <- temp[[1]]
  RBreturns[i-7,3] <- mean(as.numeric(temp[[2]]>0))
  RBreturns[i-7,1] <- name[i]
  RBreturns[i-7,4] <- temp[[3]]
  print(list(name[i],table(temp[[4]])))
}

#RB simple strategy
RBDSimple <- data.frame((dim(MovingDLR)[2]),4)
for(i in 8:27)
{
  t <- FactorResultDaily(MovingDLR[,i],MovingDLR$RB,1)
  re <- SimpleStrategy(MovingDLR[,i],MovingDLR$RB,sign(t[2]))
  RBDSimple[i-7,2] <- re[1]
  RBDSimple[i-7,3] <- re[2]
  RBDSimple[i-7,1] <- names(MovingDLR)[i]
  RBDSimple[i-7,4] <- t[2]
  print(c(re[3],re[4]))
}

HCreturns <- data.frame(30,4)
for(i in 8:26)
{
  temp <- FactorResultDNewOnlySign(MovingDLR[,i],MovingDLR$HC,1,1)
  HCreturns[i-7,2] <- temp[[1]]
  HCreturns[i-7,3] <- mean(as.numeric(temp[[2]]>0))
  HCreturns[i-7,1] <- name[i]
  HCreturns[i-7,4] <- temp[[3]]
}
#HC simple strategy
HCDSimple <- data.frame((dim(MovingDLR)[2]),4)
for(i in 8:27)
{
  t <- FactorResultDaily(MovingDLR[,i],MovingDLR$HC,1)
  re <- SimpleStrategy(MovingDLR[,i],MovingDLR$HC,sign(t[2]))
  HCDSimple[i-7,2] <- re[1]
  HCDSimple[i-7,3] <- re[2]
  HCDSimple[i-7,1] <- names(MovingDLR)[i]
  HCDSimple[i-7,4] <- t[2]
  print(c(re[3],re[4]))
}

Jreturns <- data.frame(30,4)
for(i in 8:26)
{
  temp <- FactorResultDNewOnlySign(MovingDLR[,i],MovingDLR$J,1,1)
  Jreturns[i-7,2] <- temp[[1]]
  Jreturns[i-7,3] <- mean(as.numeric(temp[[2]]>0))
  Jreturns[i-7,1] <- name[i]
  Jreturns[i-7,4] <- temp[[3]]
  print(table(temp[[4]]))
}


#J simple strategy
JDSimple <- data.frame((dim(MovingDLR)[2]),4)
for(i in 8:27)
{
  t <- FactorResultDaily(MovingDLR[,i],MovingDLR$J,1)
  re <- SimpleStrategy(MovingDLR[,i],MovingDLR$J,sign(t[2]))
  JDSimple[i-7,2] <- re[1]
  JDSimple[i-7,3] <- re[2]
  JDSimple[i-7,1] <- names(MovingDLR)[i]
  JDSimple[i-7,4] <- t[2]
  print(c(re[3],re[4]))
}

JMreturns <- data.frame(30,4)
for(i in 8:26)
{
  temp <- FactorResultDNewOnlySign(MovingDLR[,i],MovingDLR$JM,1,1)
  JMreturns[i-7,2] <- temp[[1]]
  JMreturns[i-7,3] <- mean(as.numeric(temp[[2]]>0))
  JMreturns[i-7,1] <- name[i]
  JMreturns[i-7,4] <- temp[[3]]
  print(table(temp[[4]]))
}

#JM simple strategy
JMDSimple <- data.frame((dim(MovingDLR)[2]),4)
for(i in 8:27)
{
  t <- FactorResultDaily(MovingDLR[,i],MovingDLR$JM,1)
  re <- SimpleStrategy(MovingDLR[,i],MovingDLR$JM,sign(t[2]))
  JMDSimple[i-7,2] <- re[1]
  JMDSimple[i-7,3] <- re[2]
  JMDSimple[i-7,1] <- names(MovingDLR)[i]
  JMDSimple[i-7,4] <- t[2]
  print(c(re[3],re[4]))
}


TotalDailyDataReturn <- cbind(IOreturns[,1:2],RBreturns[,2],HCreturns[,2],Jreturns[,2],JMreturns[,2])
names(TotalDailyDataReturn) <- c("Indicator","IO","RB","HC","J","JM")

TotalDailyDataReturnWinRate <- cbind(IOreturns[,c(1,3)],RBreturns[,3],HCreturns[,3],Jreturns[,3],JMreturns[,3])
names(TotalDailyDataReturnWinRate) <- c("Indicator","IO","RB","HC","J","JM")

DSimpleReturn <- cbind(IODSimple[,c(1,3)],RBDSimple[,3],HCDSimple[,3],JDSimple[,3],JMDSimple[,3])
names(DSimpleReturn) <- c("Indicator","IO","RB","HC","J","JM")

DSimpleDirection <- as.data.frame(cbind(IODSimple[,1],sign(IODSimple[,4]),sign(RBDSimple[,3]),sign(HCDSimple[,3]),sign(JDSimple[,3]),sign(JMDSimple[,3])))
names(DSimpleDirection) <- c("Indicator","IO","RB","HC","J","JM")


#Only good indicators
for(i in 2:dim(DSimpleDirection)[1])
{
  for(j in 2:dim(DSimpleDirection)[2])
  {
    if(DSimpleReturn[i,j] < 0.2)
      DSimpleDirection[i,j] <- 0
  }
}

Direction <- cbind(IOreturns[,c(1,4)],RBreturns[,4],HCreturns[,4],Jreturns[,4],JMreturns[,4])

length(MovingDLR$J[!is.na(MovingDLR$J)])
length(MovingDLR$JM[!is.na(MovingDLR$JM)])

#检查一下这个策略会不会有非常频繁的调仓
table(FactorResultD(MovingDLR[,23],MovingDLR$RB,1,1)[[4]])
#好像不是非常的频繁，主要都是空头，只有少数是多头，对比一下还是本来的sharp ratio好一些
testall <- rep(TRUE,length(FactorResultD(MovingDLR[,26],MovingDLR$RB,1,1)[[4]]))
test <- FactorResultD(MovingDLR[,26],MovingDLR$RB,1,1)[[4]]>0
r <- prod(exp(FactorResultD(MovingDLR[,26],MovingDLR$RB,1,1)[[2]][test]))-1
rall <- prod(exp(FactorResultD(MovingDLR[,26],MovingDLR$RB,1,1)[[2]][testall]))-1
sharptest <- (((1+r)^(1/(length(MovingDLR$RB)/250)))-1)/sqrt(250*var(FactorResultD(MovingDLR[,26],MovingDLR$RB,1,1)[[2]][test]))
sharpall <- (((1+rall)^(1/(length(MovingDLR$RB)/250)))-1)/sqrt(250*var(FactorResultD(MovingDLR[,26],MovingDLR$RB,1,1)[[2]][testall]))

#Basically we can say that the relationship between t value and strategy returns are significant

#--------------------------------Result For Weekly Data------------------------------------
data <- read.csv("SData.csv")
data <- data[1:214,]
#Generate Log returns
LR <- NA
LR <- data
#去掉NA等元素
for(j in 5:(dim(data)[2]-5))
{
  for(i in 2:dim(data)[1])
  {
    if((!is.na(data[i,j]))&&(data[i,j]==0))
      data[i,j] = data[i-1,j]
    else
    {
      if(is.na(data[i,j]))
        data[i,j] = data[i-1,j]
    }
  }
}
#可疑的数据，看一下到底是什么样
LR$IO.Factory.Stock #good
LR$Fine.Stock
LR$IOProducationIncreaseRate


#计算log return
for(j in 5:(dim(data)[2]))
{
  for(i in 2:dim(data)[1])
  {
    LR[i,j] <- log(data[i,j]/data[i-1,j])
    #if(is.nan(log(data[i,j]/data[i-1,j])))
    #{
    #print(i)
    # print(j)
    #}
  }
}
#到这里我们也可以保证LR数据中每一个return我们在对应日期的当晚就能得到,有的是周五更新，有的是周一更新
LR <- LR[2:dim(LR)[1],] #去掉最上面的一行数据
head(LR)
summary(LR)
for(i in 5:dim(LR)[2])
{
  if(sum(is.nan(LR[,i]))>0)
    print(i)
}
LR <- LR[c(1:15,16:dim(LR)[2])] #有NaN，所以把这一行先去掉，没办法算logreturn

#Generate a new indicator
#LR$SotokTotal <- NA  #如果工厂库存下降而港口库存上升，好，abs(乘积)，如果工厂库存下降港口库存也下降，非常好，2*abs（乘积）。
#如果工厂库存上升而港口库存下降，差，-abs(乘积)，如果工厂库存上升港口库存也上升，非常好，-2*abs（乘积）。
# for(i in 1:dim(LR)[1])
# {
#   if(is.na(LR$IO.Factory.Stock[i]))
#     LR$SotokTotal[i] <- NA
#   else
#   {
#     if((LR$IO.Factory.Stock[i]==0))
#       LR$SotokTotal[i] <- 0
#     else
#     {
#       if((LR$IO.Factory.Stock[i]<0)&(LR$IO.Port.stock[i]>0))
#         LR$SotokTotal[i] <- abs(LR$IO.Factory.Stock[i]*LR$IO.Port.stock[i])
#       if((LR$IO.Factory.Stock[i]<0)&(LR$IO.Port.stock[i]<0))
#         LR$SotokTotal[i] <- 5*abs(LR$IO.Factory.Stock[i]*LR$IO.Port.stock[i])
#       if((LR$IO.Factory.Stock[i]>0)&(LR$IO.Port.stock[i]<0))
#         LR$SotokTotal[i] <- -abs(LR$IO.Factory.Stock[i]*LR$IO.Port.stock[i])
#       if((LR$IO.Factory.Stock[i]>0)&(LR$IO.Port.stock[i]>0))
#         LR$SotokTotal[i] <- -5*abs(LR$IO.Factory.Stock[i]*LR$IO.Port.stock[i])
#     }
#   }
# }
# 
# LR <- LR[,c(1:(dim(LR)[2]-6),dim(LR)[2],(dim(LR)[2]-5):(dim(LR)[2]-1))]

#cor(LR[,3:dim(LR)[2]])
#lmresult <- list()
#lmresult[["mod1"]] <- 1
#for(i in 3:(dim(LR)[2]-1))
#{
#  print(i)
#  lmresult[[paste("mod",sep='',i)]] <- summary(lm(LR$IOPrices~LR[,i]))$coefficient
#}

#tvalue <- vector()
#for(i in 1:(dim(LR)[2]-3))
#{
#  tvalue[i] <- lmresult[[i]][2,3]
#}
#sig <- c(11,14,16 ,18 ,19 ,26 ,28)
#这块做的可能不是特别的准确
#tvalue[sig]
#11 14 16 18 19 26 28
#IOProducationIncreaseRate
#FineCURate
#BlastCURate
#BarPriceIndex
#BarPriceChina
#CarSalesAmount
#USDIndex

#For this part, it's weekly data, result is not very good
#可以尝试用
# FactorResultWeekly(LR$IO.Port.stock..S0110152.,LR$IOPrices) #Negi, not Sig
# FactorResultWeekly(LR$IO.Aus.Stock,LR$IOPrices) #Negi, not Sig
# FactorResultWeekly(LR$IO.Brizel.Stock,LR$IOPrices) #Negi, not Sig
# FactorResultWeekly(LR$IO.Port.stock1,LR$IOPrices) #Negi, Sig, One possible way is to get a mean of these 2 numbers
# FactorResultWeekly(LR$IO.Factory.Stock,LR$IOPrices) #Negi, not Sig
# FactorResultWeekly(LR$Fine.Stock,LR$IOPrices) #Negi, not Sig
# FactorResultWeekly(LR$SteelCostIndex,LR$IOPrices) #Negi, very Sig
# FactorResultWeekly(LR$LongStock,LR$IOPrices) #Posi, not Sig
# FactorResultWeekly(LR$BarStock,LR$IOPrices) #Posi, not Sig
# FactorResultWeekly(LR$HRCStock,LR$IOPrices) #Posi, not Sig
# FactorResultWeekly(LR$兰格钢铁.钢材库存指数.板材.热轧,LR$IOPrices) #Posi, not Sig
# FactorResultWeekly(LR$IOProducationIncreaseRate,LR$IOPrices) #Posi, not Sig
# FactorResultWeekly(LR$IOProducationAmount,LR$IOPrices) #Negi, not Sig
# FactorResultWeekly(LR$BDI,LR$IOPrices) #Negi, not Sig
# FactorResultWeekly(LR$FineCURate,LR$IOPrices) #Posi, not Sig
# FactorResultWeekly(LR$BlastCURate,LR$IOPrices) #Posi, very Sig
# FactorResultWeekly(LR$FactoryRevenueRate,LR$IOPrices) #Posi, Sig
# FactorResultWeekly(LR$BarPriceIndex,LR$IOPrices) #Negi, not Sig
# FactorResultWeekly(LR$BarPriceChina,LR$IOPrices) #Posi, not Sig
# FactorResultWeekly(LR$MetalIndustryInvestment,LR$IOPrices) #Negi, not Sig
# FactorResultWeekly(LR$REIndex,LR$IOPrices) #Posi, not Sig
# FactorResultWeekly(LR$LandBought,LR$IOPrices) #Posi, not Sig
# FactorResultWeekly(LR$ClarksonsIndex,LR$IOPrices) #Posi, not Sig
# FactorResultWeekly(LR$CarSalesAmount,LR$IOPrices) #Posi, not Sig
# FactorResultWeekly(LR$CarPriceIndex,LR$IOPrices) #Posi, not Sig
# FactorResultWeekly(LR$CarProducation,LR$IOPrices) #Posi, not Sig
# FactorResultWeekly(LR$BarFuturePrice,LR$IOPrices) #Negi, not Sig

#同样的变成moving average
MovingLR <- LR
step <- 8
MovingLR <- MovingLR[(step):dim(LR)[1],]
for(j in 5:(dim(data)[2]-5))
{
  MovingLR[,j] <- rollEWMA(LR[,j],step)
}

#Deal with Inf and NaN
for(i in 2:dim(MovingLR)[1])
{
  for(j in 5:(dim(MovingLR)[2]-5))
  {
    if(is.infinite(MovingLR[i,j])||is.nan(MovingLR[i,j]))
      MovingLR[i,j] <- MovingLR[i-1,j]
  }
}
MovingLR$BarPriceChina[1] <- MovingLR$BarPriceChina[2]

FactorResultWeekly(MovingLR$USDIndex,MovingLR$IOPrices)

#Basically very similiar to the previous functions
FactorResultWNew <- function(x,y,holding = 1,outputdetail = 0,tradingcost = 0,rolling = 20)
{
  #在这里我们只做lag1阶的回归，不再做别的回归了
  if(is.na(x[1])||is.infinite(x[1]))
    x[1] <- x[2]
  if(sum(is.na(x))>2)
  {
    t <- cbind(x,y)
    t <- t[complete.cases(t),]
    x <- t[,1]
    y <- t[,2]
  }
  returnlist <- vector()
  ynas <- sum(as.numeric(is.na(y)))
  ytl <- length(y)
  ya <- y[!is.na(y)]
  yal <- length(ya)
  totalregression <- yal - rolling
  tresultvec <- vector()
  consvec <- vector()
  corsvec <- vector()
  positiondirection <- vector()
  for(i in 2:totalregression)
  {
    ytemp <- ya[i:(rolling-1+i)] #it's always true that ya[i:(rolling-1+i)] == y[(ynas+i):(ynas-1+i+rolling)]
    xtemp <- x[(ynas-1+i):(ynas-1+i+rolling-1)]
    if(is.na(xtemp[1]))
      xtemp[1] <- xtemp[2]
    #这里容易出错，记得check
    t <- summary(lm(ytemp~xtemp))$coefficient[2,3]
    con <- summary(lm(ytemp~xtemp))$coefficient[1,1]
    cor <- summary(lm(ytemp~xtemp))$coefficient[2,1]
    tresultvec[i] <- t
    consvec[i] <- con
    corsvec[i] <- cor
    flag <- sign(t)
    
    if(holding==1)
    {
      #注意我们这里要用于test的x和y都是rolling regression没用到的下两个数据
      xfortest <- x[(ynas-1+i+rolling-1)+1]
      yfortest <- ya[(rolling-1+i)+1]
      if((con + cor*xfortest)>0)
      {
        returnlist[i] <- yfortest
        positiondirection[i] <- 1
      }
      else
      {
        returnlist[i] <- -yfortest
        positiondirection[i] <- -1
      }
    }
    else #Holding Period is not 1 day, not done yet
    {
      date <- MovingDLR$Ndate
      temp <- as.data.frame(cbind(date,x,y))
      temp <- as.data.frame(temp[complete.cases(temp),])
      returnlist <- vector()
      htemp <- temp[seq(1,dim(temp)[1],holding),]
      for(i in 1:dim(htemp)[1])
      {
        if(flag==1)
        {
          for(i in 1:(dim(htemp)[1]-1))
          {
            if((htemp$x[i]*cor+cons)>0)
            {
              returnlist[i] <- htemp$y[i+1]
            }
            else
              returnlist[i] <- -htemp$y[i+1]
          }
        }
        if(flag==-1)
        {
          for(i in 1:(dim(htemp)[1]-1))
          {
            if((htemp$x[i]*cor+cons)>0)
            {
              returnlist[i] <- -htemp$y[i+1]
            }
            else
              returnlist[i] <- htemp$y[i+1]
          }
        }
      }
      returntotal <- (prod(exp(returnlist)))^(1/((htemp$date[length(htemp$date)]-htemp$date[1])/250))-1
      returnl <- list()
      returnl[[1]] <- returntotal
      returnl[[2]] <- returnlist
      if(outputdetail==1)
        return(returnl)
      else
        return(returntotal)    
    }
  }
  returntotal <- prod(exp(returnlist[!is.na(returnlist)])-tradingcost)-1
  returnl <- list()
  returnl[[1]] <- returntotal
  returnl[[2]] <- returnlist
  returnl[[3]] <- flag
  returnl[[4]] <- as.vector(table(positiondirection))
  returnl[[5]] <- tresultvec
  returnl[[6]] <- consvec
  returnl[[7]] <- corsvec
  if(outputdetail==1)
    return(returnl)
  else
    return(returntotal) 
}

FactorResultWNewOnlySign <- function(x,y,holding = 1,outputdetail = 0,tradingcost = 0,rolling = 20)
{
  #在这里我们只做lag1阶的回归，不再做别的回归了
  if(is.na(x[1])||is.infinite(x[1]))
    x[1] <- x[2]
  if(sum(is.na(x))>2)
  {
    t <- cbind(x,y)
    t <- t[complete.cases(t),]
    x <- t[,1]
    y <- t[,2]
  }
  returnlist <- vector()
  ynas <- sum(as.numeric(is.na(y)))
  ytl <- length(y)
  ya <- y[!is.na(y)]
  yal <- length(ya)
  totalregression <- yal - rolling
  tresultvec <- vector()
  consvec <- vector()
  corsvec <- vector()
  positiondirection <- vector()
  for(i in 2:totalregression)
  {
    ytemp <- ya[i:(rolling-1+i)]
    xtemp <- x[(ynas-1+i):(ynas-1+i+rolling-1)]
    if(is.na(xtemp[1]))
      xtemp[1] <- xtemp[2]
    #这里容易出错，记得check
    t <- summary(lm(ytemp~xtemp))$coefficient[2,3]
    con <- summary(lm(ytemp~xtemp))$coefficient[1,1]
    cor <- summary(lm(ytemp~xtemp))$coefficient[2,1]
    tresultvec[i] <- t
    consvec[i] <- con
    corsvec[i] <- cor
    flag <- sign(t)
    if(holding==1)
    {
      #注意我们这里要用于test的x和y都是rolling regression没用到的下两个数据
      xfortest <- x[(ynas-1+i+rolling-1)+1]
      yfortest <- ya[(rolling-1+i)+1]
      if(flag==1)
      {    
        if((xfortest)>0)
        {
          returnlist[i] <- yfortest
          positiondirection[i] <- 1
        }
        else
        {
          returnlist[i] <- -yfortest
          positiondirection[i] <- -1}
      }
      if(flag==-1)
      {    
        if((xfortest)>0)
        {
          returnlist[i] <- -yfortest
          positiondirection[i] <- -1
        }
        else
        {
          returnlist[i] <- yfortest
          positiondirection[i] <- 1}
      }
    }
    else #Holding Period is not 1 day, not done yet
    {
      date <- MovingDLR$Ndate
      temp <- as.data.frame(cbind(date,x,y))
      temp <- as.data.frame(temp[complete.cases(temp),])
      returnlist <- vector()
      htemp <- temp[seq(1,dim(temp)[1],holding),]
      for(i in 1:dim(htemp)[1])
      {
        if(flag==1)
        {
          for(i in 1:(dim(htemp)[1]-1))
          {
            if((htemp$x[i]*cor+cons)>0)
            {
              returnlist[i] <- htemp$y[i+1]
            }
            else
              returnlist[i] <- -htemp$y[i+1]
          }
        }
        if(flag==-1)
        {
          for(i in 1:(dim(htemp)[1]-1))
          {
            if((htemp$x[i]*cor+cons)>0)
            {
              returnlist[i] <- -htemp$y[i+1]
            }
            else
              returnlist[i] <- htemp$y[i+1]
          }
        }
      }
      returntotal <- (prod(exp(returnlist)))^(1/((htemp$date[length(htemp$date)]-htemp$date[1])/250))-1
      returnl <- list()
      returnl[[1]] <- returntotal
      returnl[[2]] <- returnlist
      if(outputdetail==1)
        return(returnl)
      else
        return(returntotal)    
    }
  }
  returntotal <- prod(exp(returnlist[!is.na(returnlist)])-tradingcost)-1
  returnl <- list()
  returnl[[1]] <- returntotal
  returnl[[2]] <- returnlist[!is.na(returnlist)]
  returnl[[3]] <- flag
  returnl[[4]] <- as.vector(table(positiondirection))
  returnl[[5]] <- tresultvec
  returnl[[6]] <- consvec
  returnl[[7]] <- corsvec
  if(outputdetail==1)
    return(returnl)
  else
    return(returntotal) 
}

#RBPrices,Jprices里面有NA，需要处理一下,Done Now

IOWreturns<- NA
RBWreturns<- NA
HCWreturns<- NA
JWreturns<- NA
JMWreturns <- NA
name <- names(MovingLR)
IOWreturns <- data.frame((dim(MovingLR)[2]),3)
for(i in 5:(dim(MovingLR)[2]))
{
  temp <- FactorResultWNewOnlySign(MovingLR[,i],MovingLR$IOPrices,1,1)
  IOWreturns[i-4,2] <- temp[[1]]
  IOWreturns[i-4,3] <- mean(as.numeric(temp[[2]]>0))
  IOWreturns[i-4,1] <- name[i]
}

#IO simple strategy
IOWSimple <- data.frame((dim(MovingLR)[2]),4)
for(i in 5:(dim(MovingLR)[2]-5))
{
  if(i!=10)
{  t <- FactorResultWeekly(MovingLR[,i],MovingLR$IOPrices,1)
  IOWSimple[i-4,2] <- SimpleStrategy(MovingLR[,i],MovingLR$IOPrices,sign(t[2]),0)[1]
  IOWSimple[i-4,3] <- SimpleStrategy(MovingLR[,i],MovingLR$IOPrices,sign(t[2]),0)[2]
  IOWSimple[i-4,1] <- names(MovingLR)[i]
  IOWSimple[i-4,4] <- t[2]}
}

#Test our simple strategy
#FactorResultWeekly(MovingLR$SteelFactoryCoalBuyingPrice.Average.,MovingLR$Jprices,1)
IOWSimple <- data.frame((dim(MovingLR)[2]),4)
for(i in 5:dim(MovingLR)[2])
{
  t <- FactorResultWeekly(MovingLR[,i],MovingLR$IOPrices,1)
  IOWSimple[i-4,2] <- SimpleStrategy(MovingLR[,i],MovingLR$IOPrices,sign(t[2]))[1]
  IOWSimple[i-4,3] <- SimpleStrategy(MovingLR[,i],MovingLR$IOPrices,sign(t[2]))[2]
  IOWSimple[i-4,1] <- names(MovingLR)[i]
  IOWSimple[i-4,4] <- t[2]
}

RBWreturns <- data.frame((dim(MovingLR)[2]),3)
for(i in 5:(dim(MovingLR)[2]-6))
{
  if(is.infinite(MovingLR[1,i]))
    MovingLR[1,i] = 0
  if(sum(as.numeric(is.na(MovingLR[,i])))==0)
{  temp <- FactorResultWNewOnlySign(MovingLR[,i],MovingLR$RBPrices,1,1) #Here this probelm is pending
  RBWreturns[i-4,2] <- temp[[1]]
  RBWreturns[i-4,3] <- mean(as.numeric(temp[[2]]>0))
  RBWreturns[i-4,1] <- name[i]}
}

RBWSimple <- data.frame((dim(MovingLR)[2]),4)
for(i in 5:dim(MovingLR)[2])
{
  if(i!=10)
  {  t <- FactorResultWeekly(MovingLR[,i],MovingLR$RBPrices,1)
  RBWSimple[i-4,2] <- SimpleStrategy(MovingLR[,i],MovingLR$RBPrices,sign(t[2]),0)[1]
  RBWSimple[i-4,3] <- SimpleStrategy(MovingLR[,i],MovingLR$RBPrices,sign(t[2]),0)[2]
  RBWSimple[i-4,1] <- names(MovingLR)[i]
  RBWSimple[i-4,4] <- t[2]}
}

HCWreturns <- data.frame((dim(MovingLR)[2]),3)
for(i in 5:(dim(MovingLR)[2]-6))
{
  temp <- FactorResultWNewOnlySign(MovingLR[,i],MovingLR$HRCPrices,1,1)
  HCWreturns[i-4,2] <- temp[[1]]
  HCWreturns[i-4,3] <- mean(as.numeric(temp[[2]]>0))
  HCWreturns[i-4,1] <- name[i]
}

HCWSimple <- data.frame((dim(MovingLR)[2]),4)
for(i in 5:dim(MovingLR)[2])
{
  if(i!=10)
  {  t <- FactorResultWeekly(MovingLR[,i],MovingLR$HRCPrices,1)
  HCWSimple[i-4,2] <- SimpleStrategy(MovingLR[,i],MovingLR$HRCPrices,sign(t[2]),0)[1]
  HCWSimple[i-4,3] <- SimpleStrategy(MovingLR[,i],MovingLR$HRCPrices,sign(t[2]),0)[2]
  HCWSimple[i-4,1] <- names(MovingLR)[i]
  HCWSimple[i-4,4] <- t[2]}
}

JWreturns <- data.frame((dim(MovingLR)[2]),3)
for(i in 5:(dim(MovingLR)[2]-5))
{
  temp <- FactorResultWNewOnlySign(MovingLR[,i],MovingLR$Jprices,1,1)
  JWreturns[i-4,2] <- temp[[1]]
  JWreturns[i-4,3] <- mean(as.numeric(temp[[2]]>0))
  JWreturns[i-4,1] <- name[i]
}

JWSimple <- data.frame((dim(MovingLR)[2]),4)
for(i in 5:dim(MovingLR)[2])
{
  if(i!=10)
  {  t <- FactorResultWeekly(MovingLR[,i],MovingLR$Jprices,1)
  JWSimple[i-4,2] <- SimpleStrategy(MovingLR[,i],MovingLR$Jprices,sign(t[2]),0)[1]
  JWSimple[i-4,3] <- SimpleStrategy(MovingLR[,i],MovingLR$Jprices,sign(t[2]),0)[2]
  JWSimple[i-4,1] <- names(MovingLR)[i]
  JWSimple[i-4,4] <- t[2]}
}
#Test our simple strategy
#FactorResultWeekly(MovingLR$SteelFactoryCoalBuyingPrice.Average.,MovingLR$Jprices,1)
for(i in 5:dim(MovingLR)[2])
{
  t <- FactorResultWeekly(MovingLR[,i],MovingLR$Jprices,1)
  print(c(names(MovingLR)[i]))
  print(c(sign(t[2]),SimpleStrategy(MovingLR[,i],MovingLR$Jprices,sign(t[2]))))
}

JMWreturns <- data.frame((dim(MovingLR)[2]),3)
for(i in 5:(dim(MovingLR)[2]-5))
{
  temp <- FactorResultWNewOnlySign(MovingLR[,i],MovingLR$JMPrices,1,1)
  JMWreturns[i-4,2] <- temp[[1]]
  JMWreturns[i-4,3] <- mean(as.numeric(temp[[2]]>0))
  JMWreturns[i-4,1] <- name[i]
}

JMWSimple <- data.frame((dim(MovingLR)[2]),4)
for(i in 5:dim(MovingLR)[2])
{
  if(i!=10)
  {  t <- FactorResultWeekly(MovingLR[,i],MovingLR$JMPrices,1)
  JMWSimple[i-4,2] <- SimpleStrategy(MovingLR[,i],MovingLR$JMPrices,sign(t[2]),0)[1]
  JMWSimple[i-4,3] <- SimpleStrategy(MovingLR[,i],MovingLR$JMPrices,sign(t[2]),0)[2]
  JMWSimple[i-4,1] <- names(MovingLR)[i]
  JMWSimple[i-4,4] <- t[2]}
}

TotalWeeklyDataReturn <- cbind(IOreturns[,1:2],RBreturns[,2],HCreturns[,2],Jreturns[,2],JMreturns[,2])
names(TotalWeeklyDataReturn) <- c("Indicator","IO","RB","HC","J","JM")

TotalWeeklyDataReturnWinRate <- cbind(IOreturns[,c(1,3)],RBreturns[,3],HCreturns[,3],Jreturns[,3],JMreturns[,3])
names(TotalWeeklyDataReturnWinRate) <- c("Indicator","IO","RB","HC","J","JM")

WSimpleReturn <- cbind(IOWSimple[,c(1,3)],RBWSimple[,3],HCWSimple[,3],JWSimple[,3],JMWSimple[,3])
names(WSimpleReturn) <- c("Indicator","IO","RB","HC","J","JM")

WSimpleDirection <- as.data.frame(cbind(IOWSimple[,1],sign(IOWSimple[,4]),sign(RBWSimple[,3]),sign(HCWSimple[,3]),sign(JWSimple[,3]),sign(JMWSimple[,3])))
names(DSimpleDirection) <- c("Indicator","IO","RB","HC","J","JM")

#Only good indicators
for(i in 2:dim(WSimpleDirection)[1])
{
  for(j in 2:dim(WSimpleDirection)[2])
  {
    if(!is.na(WSimpleReturn[i,j])&(WSimpleReturn[i,j] < 0.1))
      WSimpleDirection[i,j] <- 0
  }
}

length(LR$JMPrices[!is.na(LR$JMPrices)])
length(LR$Jprices[!is.na(LR$Jprices)])

#接下来的任务，1. 测试一下monthly data的表现 2.测试一下那些新的因子数据的表现怎么样 3. 测试一下别的黑色系的表现
#注意在做的过程中要不断的看算的logreturn和收益率对不对

length(DLR$IO[!is.na(DLR$IO)])
length(DLR$IO[!is.na(DLR$RB)])
length(DLR$IO[!is.na(DLR$HC)])

#Daily t value ratio, the aim is to get how many times does the sign of the tvalue changes.

na <- names(MovingDLR)
name <- vector()
tvalue <- vector()
for(i in 8:(dim(MovingDLR)[2]))
{
  tvalue[i-7] <- tRatioNotFull(MovingDLR[,i],MovingDLR$IO)
  name[i-7] <- na[i]
}
IOtotal <- cbind(name,tvalue)

na <- names(MovingDLR)
name <- vector()
tvalue <- vector()
for(i in 8:(dim(MovingDLR)[2]))
{
  tvalue[i-7] <- tRatioNotFull(MovingDLR[,i],MovingDLR$RB)
  name[i-7] <- na[i]
}
RBtotal <- cbind(name,tvalue)

na <- names(MovingDLR)
name <- vector()
tvalue <- vector()
for(i in 8:(dim(MovingDLR)[2]))
{
  tvalue[i-7] <- tRatioNotFull(MovingDLR[,i],MovingDLR$HC)
  name[i-7] <- na[i]
  
}
HCtotal <- cbind(name,tvalue)

na <- names(MovingDLR)
name <- vector()
tvalue <- vector()
for(i in 8:(dim(MovingDLR)[2]))
{
  tvalue[i-7] <- tRatioNotFull(MovingDLR[,i],MovingDLR$J)
  name[i-7] <- na[i]
  
}
Jtotal <- cbind(name,tvalue)

na <- names(MovingDLR)
name <- vector()
tvalue <- vector()
for(i in 8:(dim(MovingDLR)[2]))
{
  tvalue[i-7] <- tRatioNotFull(MovingDLR[,i],MovingDLR$JM)
  name[i-7] <- na[i]
  
}
JMtotal <- cbind(name,tvalue)


tratio <- as.data.frame(cbind(IOtotal[,1:2],RBtotal[,2],HCtotal[,2],Jtotal[,2],JMtotal[,2]))
names(tratio) <- c("","IO","RB","HC","J","JM")

#Weekly t value ratio

na <- names(MovingLR)
name <- vector()
tvalue <- vector()
for(i in 5:(dim(MovingLR)[2]-3))
{
  if(is.na(MovingLR[1,i])||is.infinite(MovingLR[1,i]))
  {
    if(is.infinite(MovingLR[1,i]))
    {
      MovingLR[1,i] <- 0
    }
    tvalue[i-4] <- tRatioFull(MovingLR[,i],MovingLR$IOPrices)
    name[i-4] <- na[i]    
  }
  else
  {  
    tvalue[i-4] <- tRatioNotFull(MovingLR[,i],MovingLR$IOPrices)
    name[i-4] <- na[i]
  }
}
IOtotalW <- cbind(name,tvalue)

na <- names(MovingLR)
name <- vector()
tvalue <- vector()
for(i in 5:(dim(MovingLR)[2]-3))
{
  if(is.na(MovingLR[1,i])||is.infinite(MovingLR[1,i]))
  {
    if(is.infinite(MovingLR[1,i]))
    {
      MovingLR[1,i] <- 0
    }
    tvalue[i-4] <- tRatioFull(MovingLR[,i],MovingLR$RBPrices)
    name[i-4] <- na[i]    
  }
  else
  {  
    tvalue[i-4] <- tRatioNotFull(MovingLR[,i],MovingLR$RBPrices)
    name[i-4] <- na[i]
  }
}
RBtotalW <- cbind(name,tvalue)

na <- names(MovingLR)
name <- vector()
tvalue <- vector()
for(i in 5:(dim(MovingLR)[2]-3))
{
  if(is.na(MovingLR[1,i])||is.infinite(MovingLR[1,i]))
  {
    if(is.infinite(MovingLR[1,i]))
    {
      MovingLR[1,i] <- 0
    }
    tvalue[i-4] <- tRatioFull(MovingLR[,i],MovingLR$HRCPrices)
    name[i-4] <- na[i]    
  }
  else
  {  
    tvalue[i-4] <- tRatioNotFull(MovingLR[,i],MovingLR$HRCPrices)
    name[i-4] <- na[i]
  }
}
HCtotalW <- cbind(name,tvalue)

na <- names(MovingLR)
name <- vector()
tvalue <- vector()
for(i in 5:(dim(MovingLR)[2]-5))
{
  if(is.na(MovingLR[1,i])||is.infinite(MovingLR[1,i]))
  {
    if(is.infinite(MovingLR[1,i]))
    {
      MovingLR[1,i] <- 0
    }
    tvalue[i-4] <- tRatioFull(MovingLR[,i],MovingLR$Jprices)
    name[i-4] <- na[i]    
  }
  else
  {  
    tvalue[i-4] <- tRatioNotFull(MovingLR[,i],MovingLR$Jprices)
    name[i-4] <- na[i]
  }
}
JtotalW <- cbind(name,tvalue)

na <- names(MovingLR)
name <- vector()
tvalue <- vector()
for(i in 5:(dim(MovingLR)[2]-5))
{
  if(is.na(MovingLR[1,i])||is.infinite(MovingLR[1,i]))
  {
    if(is.infinite(MovingLR[1,i]))
    {
      MovingLR[1,i] <- 0
    }
    tvalue[i-4] <- tRatioFull(MovingLR[,i],MovingLR$JMPrices)
    name[i-4] <- na[i]    
  }
  else
  {  
    tvalue[i-4] <- tRatioNotFull(MovingLR[,i],MovingLR$JMPrices)
    name[i-4] <- na[i]
  }
}
JMtotalW <- cbind(name,tvalue)

tratioW <- as.data.frame(cbind(IOtotalW[,1:2],RBtotalW[,2],HCtotalW[,2],JtotalW[,2],JMtotalW[,2]))
names(tratioW) <- c("","IO","RB","HC","J","JM")
