
#Seems not working well

#Try Some Machine Learning Methods
#cor(LR[,sig])
#summary(lm(LR$IOPrices~LR[,(sig[1])+2]+LR[,(sig[2])+2]+LR[,(sig[3])+2]+LR[,(sig[4])+2]+LR[,(sig[5])+2]+LR[,(sig[6])+2]+LR[,(sig[7])+2]))

#LR1 <- LR
LR <- NA
LR <- MovingDLR[,5:20]
LR$IO <- MovingDLR$IO
head(LR)
LR <- LR[complete.cases(LR),]
LR$Test <- as.numeric(LR$IO>0)
LR$pred <- NA
install.packages("e1071")
install.packages("Matrix")
install.packages("SparseM")
install.packages("kernlab")
library(e1071)
library(Matrix)
library(SparseM)
library(kernlab)
testm1 <- ksvm(LR$Test[1:(dim(LR)[1]-60)]~as.matrix(LR[1:(dim(LR)[1]-60),1:(dim(LR)[2]-3)]))
LR$pred[1:(dim(LR)[1]-60)] <- as.numeric(predict(testm1,as.matrix(LR[1:(dim(LR)[1]-60),1:(dim(LR)[2]-3)]))>0.5)
LR$pred[(dim(LR)[1]-60+1):dim(LR)[1]] <- as.numeric(predict(testm1,as.matrix(LR[(dim(LR)[1]-60+1):dim(LR)[1],1:(dim(LR)[2]-3)]))>0.5)
1-sum(abs(LR$pred-LR$Test)[1:(dim(LR)[1]-60)])/length(abs(LR$pred-LR$Test)[1:(dim(LR)[1]-60)]) #In the sample 0.79
1-sum(abs(LR$pred-LR$Test)[(dim(LR)[1]-60+1):dim(LR)[1]])/60 #out of sample 0.53
#In the Sample have a good result
#predict(testm1,as.matrix(LR[1,3:(dim(LR)[2]-2)]))
